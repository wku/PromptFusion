"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–º–ø—Ç-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
–≤–º–µ—Å—Ç–æ –º–µ—Ö–∞–Ω–∏–∑–º–∞ —Ñ—É–Ω–∫—Ü–∏–π API OpenAI/OpenRouter.


"""

import os
import json
from typing import List, Dict, Any, Optional, Union

from models import AppState, ChatSession
from utils import get_tokens_cnt, get_cost, input_yes_no, is_no, is_yes
from prompt_tools import PromptTools


def start_chat_session(app_state: AppState) -> None:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç —Å LLM –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–º–ø—Ç-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤–º–µ—Å—Ç–æ —Ñ—É–Ω–∫—Ü–∏–π API.

    Args:
        app_state: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    session = ChatSession ()
    prompt_tools = PromptTools (app_state)

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    sys_prompt = get_sys_prompt (app_state)

    # –†–∞—Å—à–∏—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
    enhanced_sys_prompt = prompt_tools.enhance_system_prompt (sys_prompt)

    sys_prompt_tokens = get_tokens_cnt (enhanced_sys_prompt)
    sys_prompt_cost = get_cost (app_state.app_config.chat_model, sys_prompt_tokens, 0)

    print (f"\n–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç: —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–≤–æ–¥–∞: ${sys_prompt_cost:.4f} ({sys_prompt_tokens} —Ç–æ–∫–µ–Ω–æ–≤)")
    print (f"\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ–µ–∫—Ç–µ {os.path.basename (app_state.proj_config.path)}.")
    print ("–ù–∞–∂–º–∏—Ç–µ Ctrl-C –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.")
    print ("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /exit –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–ª–∏ /clear –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏.")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
    session.messages.append ({'role': 'system', 'content': enhanced_sys_prompt})

    while not session.exit_requested:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_input = get_user_input (session)
            if session.exit_requested:
                break

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≤–≤–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            function_result = prompt_tools.process_user_message (user_input)
            if function_result:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
                formatted_result = prompt_tools.format_function_result (function_result)
                print (f"\n{formatted_result}")
                continue

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            session.messages.append ({'role': 'user', 'content': user_input})

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ LLM
            print ("\n–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏...")

            try:
                response = app_state.openai.chat.completions.create (
                    model=app_state.app_config.chat_model,
                    messages=session.messages,
                    temperature=0
                )

                # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –≤—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API
                print ("\nAPI Response:", response)

            except Exception as e:
                print (f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å API
            if not hasattr (response, 'usage') or response.usage is None:
                print (f"Usage: app_state.app_config.chat_model {app_state.app_config.chat_model}")
                print ("–û—à–∏–±–∫–∞: response.usage –≤–µ—Ä–Ω—É–ª None. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: –Ω–µ—É–¥–∞—á–Ω—ã–π API-–∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π.")
                continue

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–∫–µ–Ω–æ–≤
            session.request_in_tokens = response.usage.prompt_tokens
            session.request_out_tokens = response.usage.completion_tokens
            session.total_in_tokens += response.usage.prompt_tokens
            session.total_out_tokens += response.usage.completion_tokens

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏
            response_message = response.choices[0].message
            bot_response = response_message.content

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞, –∑–∞–º–µ–Ω—è—è –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π –Ω–∞ –∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            processed_response = bot_response

            while True:
                original_response = processed_response
                processed_response = prompt_tools.process_bot_response (processed_response)

                # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏, –∑–Ω–∞—á–∏—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
                if original_response == processed_response:
                    break

            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
            session.messages.append ({'role': 'assistant', 'content': processed_response})

            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            chat_tokens = sum (get_message_tokens (message) for message in session.messages)
            chat_cost = get_cost (app_state.app_config.chat_model, chat_tokens, 0)

            request_cost_in = get_cost (app_state.app_config.chat_model, session.request_in_tokens, 0)
            request_cost_out = get_cost (app_state.app_config.chat_model, 0, session.request_out_tokens)
            total_cost = get_cost (
                app_state.app_config.chat_model,
                session.total_in_tokens,
                session.total_out_tokens
            )

            print ()
            print (f"–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–≤–æ–¥–∞: ${(sys_prompt_cost + chat_cost):.4f} "
                   f"(—Å–∏—Å—Ç–µ–º–Ω—ã–π: ${sys_prompt_cost:.4f}, —á–∞—Ç: ${chat_cost:.4f})")
            print (f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞: ${(request_cost_in + request_cost_out):.4f} "
                   f"(–≤–≤–æ–¥: ${request_cost_in:.4f}, –≤—ã–≤–æ–¥: ${request_cost_out:.4f})")
            print (f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏: ${total_cost:.4f}")

            print ()
            print (f'ü§ñ –ë–æ—Ç: {processed_response}')

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            session.request_in_tokens = 0
            session.request_out_tokens = 0

        except KeyboardInterrupt:
            print ("\n–ß–∞—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break


def get_user_input(session: ChatSession) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã

    Args:
        session: —Å–µ—Å—Å–∏—è —á–∞—Ç–∞

    Returns:
        str: –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, –µ—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞
    """
    while True:
        print ()
        user_input = input ('üë§ –í—ã: ').strip ()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
        if user_input.lower () == '/exit':
            session.exit_requested = True
            return ""
        elif user_input.lower () == '/clear':
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            system_message = next ((msg for msg in session.messages if msg['role'] == 'system'), None)
            session.messages = []
            if system_message:
                session.messages.append (system_message)
            print ("\n–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—á–∏—â–µ–Ω–∞")
            continue

        return user_input


def get_message_tokens(message: Dict[str, str]) -> int:
    """
    –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏

    Args:
        message: —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {'role': '...', 'content': '...'}

    Returns:
        int: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
    """
    content = message.get ('content')
    if content is not None:
        return get_tokens_cnt (content)
    return 0


def get_sys_prompt(app_state: AppState) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —á–∞—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –æ–ø–∏—Å–∞–Ω–∏—è.

    Args:
        app_state: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

    Returns:
        str: —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    """
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
    from config import MODE_DESC, MODE_DESC_NO, MODE_DESC_2

    desc_mode = app_state.proj_config.desc_mode

    if desc_mode == MODE_DESC:
        proj_struct = get_sys_context_desc (app_state.proj_state.files)
        return get_sys_prompt_template (proj_struct, app_state.proj_state.structure, True)
    elif desc_mode == MODE_DESC_NO:
        proj_struct = get_sys_context_no_desc (app_state.proj_state.files)
        return get_sys_prompt_template (proj_struct, app_state.proj_state.structure, False)
    elif desc_mode == MODE_DESC_2:
        proj_struct = get_sys_context_short_desc (app_state.proj_state.files)
        return get_sys_prompt_template (proj_struct, app_state.proj_state.structure, True)
    else:
        raise ValueError (f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º –æ–ø–∏—Å–∞–Ω–∏—è: {desc_mode}")


def get_sys_prompt_template(proj_struct: str, project_structure: Any, is_desc: bool) -> str:
    """
    –®–∞–±–ª–æ–Ω —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞

    Args:
        proj_struct: —Å—Ç—Ä–æ–∫–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
        project_structure: —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
        is_desc: –µ—Å—Ç—å –ª–∏ –æ–ø–∏—Å–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤

    Returns:
        str: —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    """
    with_descs = " —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏" if is_desc else ""

    structure_info = ""
    if project_structure:
        structure_info = f"""
–û–±—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤: {project_structure.class_count}
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π: {project_structure.function_count}
- –¢–∏–ø—ã —Ñ–∞–π–ª–æ–≤: {', '.join ([f"{k}: {v}" for k, v in project_structure.file_types.items ()])}
- –í–Ω–µ—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {', '.join (project_structure.external_dependencies)}
"""

    return f"""–í—ã —á–∞—Ç-–±–æ—Ç, –∑–∞–¥–∞—á–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ.

{structure_info}

–ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞{with_descs}.

–§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞{with_descs}:

{proj_struct}
"""


def get_sys_context_desc(files: List[Any]) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –ø–æ–ª–Ω—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ —Ñ–∞–π–ª–æ–≤

    Args:
        files: —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤

    Returns:
        str: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
    """
    from utils import add_path_prefix
    return '\n\n'.join (f"{add_path_prefix (file.path)}\n{file.desc}" for file in files)


def get_sys_context_no_desc(files: List[Any]) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏–π —Ñ–∞–π–ª–æ–≤

    Args:
        files: —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤

    Returns:
        str: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    """
    from utils import add_path_prefix
    return '\n'.join (f"{add_path_prefix (file.path)}" for file in files)


def get_sys_context_short_desc(files: List[Any]) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –∫—Ä–∞—Ç–∫–∏–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ —Ñ–∞–π–ª–æ–≤

    Args:
        files: —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤

    Returns:
        str: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å –∫—Ä–∞—Ç–∫–∏–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
    """
    from utils import add_path_prefix
    return '\n\n'.join (f"{add_path_prefix (file.path)}\n{file.desc2}" for file in files)



